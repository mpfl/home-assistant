- platform: template
  sensors:

    electricity_tariff:
      friendly_name: "Electricity tariff"
      value_template: "{% if now().hour >= 4 or now().hour < 23 %}peak{% else %}off-peak{% endif %}"

    import_tariff:
      friendly_name: "Electricity import tariff"
      value_template: "{% if is_state('sensor.electricity_tariff', 'peak') %}{{0.266612 + 0.035397}}{% else %}{{0.186046 + 0.035397}}{% endif %}"
      unit_of_measurement: "AUD/kWh"

    export_tariff:
      friendly_name: "Electricity export tariff"
      value_template: "0.071350"
      unit_of_measurement: "AUD/kWh"

# Is the house in away mode?
    away_mode:
      friendly_name: "Away mode"
      value_template: "{{ not(is_state('person.matthias', 'home') or is_state('person.laura', 'home')) }}"
      icon_template: "mdi:map"

# Work out what the lower temperature threshold should be
    cold_threshold:
      friendly_name: "Cold threshold"
      value_template: "{% if is_state('sensor.away_mode', 'True') %}20{% else %}22{% endif %}"
      icon_template: "mdi:snowflake"

# Work out what the upper temperature threshold should be
    hot_threshold:
      friendly_name: "Hot threshold"
      value_template: "{% if is_state('sensor.away_mode', 'True') %}26{% else %}24{% endif %}"
      icon_template: "mdi:fire"

# Test for whether the house is comfy or not
    home_climate:
      friendly_name: "Home climate"
      value_template: "{% if (states('sensor.home_temperature')|float) <= (states('sensor.cold_threshold')|float) %}Cold{% elif (states('sensor.home_temperature')|float) >= (states('sensor.hot_threshold')|float) %}Hot{% else %}Comfy{% endif %}"
      icon_template: "{% if (states('sensor.home_temperature')|float) <= (states('sensor.cold_threshold')|float) %}mdi:snowflake{% elif (states('sensor.home_temperature')|float) >= (states('sensor.hot_threshold')|float) %}mdi:fire{% else %}mdi:emoticon-happy-outline{% endif %}"

# Calculate average house temperature from contributing sensors
    home_temperature:
      friendly_name: "Home temperature"
      value_template: "{{ (((states('sensor.sensebender_micro_8_1') | float ) + (states('sensor.sensebender_micro_7_1') | float )) / 2) | round(1) }}"
      unit_of_measurement: "Â°C"
      icon_template: "mdi:thermometer"

# Test for whether outside is comfy or not

    outside_climate:
      friendly_name: "Outside climate"
      value_template: "{% if (states('sensor.temp')|float) <= (states('sensor.cold_threshold')|float) %}Cold{% elif (states('sensor.temp')|float) >= (states('sensor.hot_threshold')|float) %}Hot{% else %}Comfy{% endif %}"
      icon_template: "{% if (states('sensor.temp')|float) <= (states('sensor.cold_threshold')|float) %}mdi:snowflake{% elif (states('sensor.temp')|float) >= (states('sensor.hot_threshold')|float) %}mdi:fire{% else %}mdi:emoticon-happy-outline{% endif %}"

# Test for whether both HVAC devices are off
    hvac_state:
      friendly_name: "Both ACs off"
      value_template: "{{ is_state('climate.living_ac', 'off') and is_state('climate.bedroom_ac', 'off') }}"

# Convert power import/export to "available power"
    available_power:
      friendly_name: "Available Power"
      unit_of_measurement: "W"
      value_template: "{{ [states('sensor.emoncms_export')|int,0]|max }}"

# Time of day (Day/Dusk/Night)
    time_of_day:
      friendly_name: "Time of day"
      value_template: "{% set elevation = state_attr('sun.sun', 'elevation') %}{% if elevation > 3.5 %}Day{% elif elevation < -12 %}Night{% else %}Dusk{%- endif %}"
      icon_template: "{% set elevation = state_attr('sun.sun', 'elevation') %}{% if elevation > 3.5 %}mdi:weather-sunny{% elif elevation < -12 %}mdi:weather-night{% else %}mdi:weather-sunset{%- endif %}"

